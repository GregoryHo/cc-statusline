import { StatuslineConfig } from '../cli/prompts.js'
import { generateColorBashCode, generateBasicColors } from '../features/colors.js'
import { generateGitBashCode, generateGitDisplayCode, generateGitUtilities } from '../features/git.js'
import { generateUsageBashCode, generateUsageDisplayCode, generateUsageUtilities } from '../features/usage.js'

export function generateBashStatusline(config: StatuslineConfig): string {
  const hasGit = config.features.includes('git')
  const hasUsage = config.features.some(f => ['usage', 'session', 'tokens', 'burnrate'].includes(f))
  const hasDirectory = config.features.includes('directory')
  const hasModel = config.features.includes('model')

  // Build usage feature config
  const usageConfig = {
    enabled: hasUsage && config.ccusageIntegration,
    showCost: config.features.includes('usage'),
    showTokens: config.features.includes('tokens'),
    showBurnRate: config.features.includes('burnrate'),
    showSession: config.features.includes('session'),
    showProgressBar: config.theme !== 'minimal' && config.features.includes('session')
  }

  // Build git feature config
  const gitConfig = {
    enabled: hasGit,
    showBranch: hasGit,
    showChanges: false, // Removed delta changes per user request
    compactMode: config.theme === 'compact'
  }

  const timestamp = new Date().toISOString()
  const script = `#!/bin/bash
# Generated by cc-statusline (https://www.npmjs.com/package/@chongdashu/cc-statusline)
# Custom Claude Code statusline - Created: ${timestamp}
# Theme: ${config.theme} | Colors: ${config.colors} | Features: ${config.features.join(', ')}

${config.logging ? generateLoggingCode() : ''}
input=$(cat)
${generateColorBashCode({ enabled: config.colors, theme: config.theme })}
${config.colors ? generateBasicColors() : ''}
${hasUsage ? generateUsageUtilities() : ''}
${hasGit ? generateGitUtilities() : ''}
${generateBasicDataExtraction(hasDirectory, hasModel)}
${hasGit ? generateGitBashCode(gitConfig, config.colors) : ''}
${hasUsage ? generateUsageBashCode(usageConfig, config.colors) : ''}
${config.logging ? generateLoggingOutput() : ''}
${generateDisplaySection(config, gitConfig, usageConfig)}
`

  return script.replace(/\n\n\n+/g, '\n\n').trim() + '\n'
}

function generateLoggingCode(): string {
  return `
LOG_FILE="\${HOME}/.claude/statusline.log"
TIMESTAMP=$(date '+%Y-%m-%d %H:%M:%S')

# ---- logging ----
{
  echo "[$TIMESTAMP] Status line triggered with input:"
  (echo "$input" | jq . 2>/dev/null) || echo "$input"
  echo "---"
} >> "$LOG_FILE" 2>/dev/null
`
}

function generateBasicDataExtraction(hasDirectory: boolean, hasModel: boolean): string {
  return `
# ---- basics ----
if command -v jq >/dev/null 2>&1; then${hasDirectory ? `
  current_dir=$(echo "$input" | jq -r '.workspace.current_dir // .cwd // "unknown"' 2>/dev/null | sed "s|^$HOME|~|g")` : ''}${hasModel ? `
  model_name=$(echo "$input" | jq -r '.model.display_name // "Claude"' 2>/dev/null)
  model_version=$(echo "$input" | jq -r '.model.version // ""' 2>/dev/null)` : ''}
else${hasDirectory ? `
  current_dir="unknown"` : ''}${hasModel ? `
  model_name="Claude"; model_version=""` : ''}
fi
`
}

function generateLoggingOutput(): string {
  return `
# ---- log extracted data ----
{
  echo "[\$TIMESTAMP] Extracted: dir=\${current_dir:-}, model=\${model_name:-}, version=\${model_version:-}, git=\${git_branch:-}, cost=\${cost_usd:-}, cost_ph=\${cost_per_hour:-}, tokens=\${tot_tokens:-}, tpm=\${tpm:-}, session_pct=\${session_pct:-}"
} >> "$LOG_FILE" 2>/dev/null
`
}

function generateDisplaySection(config: StatuslineConfig, gitConfig: any, usageConfig: any): string {
  const emojis = config.colors && !config.customEmojis

  let displayCode = `
# ---- render statusline ----`

  // Directory
  if (config.features.includes('directory')) {
    const dirEmoji = emojis ? 'üìÅ' : 'dir:'
    displayCode += `
printf '${dirEmoji} %s%s%s' "$(dir_color)" "$current_dir" "$(rst)"`
  }

  // Git
  displayCode += generateGitDisplayCode(gitConfig, config.colors, emojis)

  // Model
  if (config.features.includes('model')) {
    const modelEmoji = emojis ? 'ü§ñ' : 'model:'
    displayCode += `
printf '  ${modelEmoji} %s%s%s' "$(model_color)" "$model_name" "$(rst)"
if [ -n "$model_version" ] && [ "$model_version" != "null" ]; then
  printf '  üè∑Ô∏è %s%s%s' "$(version_color)" "$model_version" "$(rst)"
fi`
  }

  // Usage features
  displayCode += generateUsageDisplayCode(usageConfig, config.colors, emojis)

  return displayCode
}