import { describe, it, expect } from 'vitest'
import { generateBashStatusline } from '../generators/bash-generator.js'
import { StatuslineConfig } from '../cli/prompts.js'

describe('generateBashStatusline', () => {
  describe('basic script generation', () => {
    it('should generate a valid bash script with shebang', () => {
      const config: StatuslineConfig = {
        features: ['directory'],
        theme: 'minimal',
        colors: false,
        ccusageIntegration: false,
        iconStyle: 'emoji',
        logging: false,
        installLocation: 'project'
      }

      const script = generateBashStatusline(config)

      expect(script).toContain('#!/bin/bash')
      expect(script).toContain('# Generated by cc-statusline')
      expect(script).toContain('STATUSLINE_VERSION=')
    })

    it('should include feature configuration in comments', () => {
      const config: StatuslineConfig = {
        features: ['directory', 'git', 'model'],
        theme: 'default',
        colors: true,
        ccusageIntegration: false,
        iconStyle: 'nerd-font',
        logging: false,
        installLocation: 'project'
      }

      const script = generateBashStatusline(config)

      expect(script).toContain('Theme: default')
      expect(script).toContain('Colors: true')
      expect(script).toContain('Icons: nerd-font')
      expect(script).toContain('Features: directory, git, model')
    })

    it('should include jq detection code', () => {
      const config: StatuslineConfig = {
        features: ['directory'],
        theme: 'minimal',
        colors: false,
        ccusageIntegration: false,
        iconStyle: 'emoji',
        logging: false,
        installLocation: 'project'
      }

      const script = generateBashStatusline(config)

      expect(script).toContain('HAS_JQ=0')
      expect(script).toContain('command -v jq')
      expect(script).toContain('HAS_JQ=1')
    })
  })

  describe('feature toggles', () => {
    it('should include git code when git feature is enabled', () => {
      const config: StatuslineConfig = {
        features: ['directory', 'git'],
        theme: 'default',
        colors: false,
        ccusageIntegration: false,
        iconStyle: 'emoji',
        logging: false,
        installLocation: 'project'
      }

      const script = generateBashStatusline(config)

      expect(script).toContain('git rev-parse')
      expect(script).toContain('git_branch')
    })

    it('should NOT include git code when git feature is disabled', () => {
      const config: StatuslineConfig = {
        features: ['directory'],
        theme: 'default',
        colors: false,
        ccusageIntegration: false,
        iconStyle: 'emoji',
        logging: false,
        installLocation: 'project'
      }

      const script = generateBashStatusline(config)

      expect(script).not.toContain('git rev-parse')
      expect(script).not.toContain('git_branch')
    })

    it('should include usage code when usage feature is enabled', () => {
      const config: StatuslineConfig = {
        features: ['directory', 'usage'],
        theme: 'default',
        colors: false,
        ccusageIntegration: true,
        iconStyle: 'emoji',
        logging: false,
        installLocation: 'project'
      }

      const script = generateBashStatusline(config)

      expect(script).toContain('cost_usd')
      expect(script).toContain('total_cost_usd')
    })

    it('should include context code when context feature is enabled', () => {
      const config: StatuslineConfig = {
        features: ['directory', 'context'],
        theme: 'default',
        colors: false,
        ccusageIntegration: false,
        iconStyle: 'emoji',
        logging: false,
        installLocation: 'project'
      }

      const script = generateBashStatusline(config)

      expect(script).toContain('context_pct')
      expect(script).toContain('context_remaining_pct')
      expect(script).toContain('get_max_context')
    })

    it('should include logging code when logging is enabled', () => {
      const config: StatuslineConfig = {
        features: ['directory'],
        theme: 'default',
        colors: false,
        ccusageIntegration: false,
        iconStyle: 'emoji',
        logging: true,
        installLocation: 'project'
      }

      const script = generateBashStatusline(config)

      expect(script).toContain('LOG_FILE')
      expect(script).toContain('SCRIPT_DIR')
      expect(script).toContain('statusline.log')
    })
  })

  describe('color configuration', () => {
    it('should include color functions when colors are enabled', () => {
      const config: StatuslineConfig = {
        features: ['directory'],
        theme: 'default',
        colors: true,
        ccusageIntegration: false,
        iconStyle: 'emoji',
        logging: false,
        installLocation: 'project'
      }

      const script = generateBashStatusline(config)

      expect(script).toContain('use_color=1')
      expect(script).toContain('rst()')
    })

    it('should not include color code when colors are disabled', () => {
      const config: StatuslineConfig = {
        features: ['directory'],
        theme: 'default',
        colors: false,
        ccusageIntegration: false,
        iconStyle: 'emoji',
        logging: false,
        installLocation: 'project'
      }

      const script = generateBashStatusline(config)

      expect(script).toContain('use_color=0')
    })
  })

  describe('icon styles', () => {
    it('should use emoji icons by default', () => {
      const config: StatuslineConfig = {
        features: ['directory'],
        theme: 'default',
        colors: false,
        ccusageIntegration: false,
        iconStyle: 'emoji',
        logging: false,
        installLocation: 'project'
      }

      const script = generateBashStatusline(config)

      expect(script).toContain('📁') // directory emoji
    })

    it('should use nerd-font icons when specified', () => {
      const config: StatuslineConfig = {
        features: ['directory'],
        theme: 'default',
        colors: false,
        ccusageIntegration: false,
        iconStyle: 'nerd-font',
        logging: false,
        installLocation: 'project'
      }

      const script = generateBashStatusline(config)

      expect(script).toContain('󰉋') // nerd-font directory icon
    })

    it('should use no icons when style is none', () => {
      const config: StatuslineConfig = {
        features: ['directory'],
        theme: 'default',
        colors: false,
        ccusageIntegration: false,
        iconStyle: 'none',
        logging: false,
        installLocation: 'project'
      }

      const script = generateBashStatusline(config)

      expect(script).not.toContain('📁')
      expect(script).not.toContain('󰉋')
    })
  })

  describe('theme variations', () => {
    it('should generate minimal theme correctly', () => {
      const config: StatuslineConfig = {
        features: ['directory'],
        theme: 'minimal',
        colors: false,
        ccusageIntegration: false,
        iconStyle: 'emoji',
        logging: false,
        installLocation: 'project'
      }

      const script = generateBashStatusline(config)

      expect(script).toContain('Theme: minimal')
    })

    it('should generate compact theme correctly', () => {
      const config: StatuslineConfig = {
        features: ['directory', 'git'],
        theme: 'compact',
        colors: false,
        ccusageIntegration: false,
        iconStyle: 'emoji',
        logging: false,
        installLocation: 'project'
      }

      const script = generateBashStatusline(config)

      expect(script).toContain('Theme: compact')
    })
  })

  describe('JSON extraction', () => {
    it('should include JSON extraction utilities', () => {
      const config: StatuslineConfig = {
        features: ['directory', 'model'],
        theme: 'default',
        colors: false,
        ccusageIntegration: false,
        iconStyle: 'emoji',
        logging: false,
        installLocation: 'project'
      }

      const script = generateBashStatusline(config)

      expect(script).toContain('extract_json_string')
      expect(script).toContain('# Pure bash JSON value extractor')
    })

    it('should include jq-based extraction for directory', () => {
      const config: StatuslineConfig = {
        features: ['directory'],
        theme: 'default',
        colors: false,
        ccusageIntegration: false,
        iconStyle: 'emoji',
        logging: false,
        installLocation: 'project'
      }

      const script = generateBashStatusline(config)

      expect(script).toContain('workspace.current_dir')
      expect(script).toContain('current_dir')
    })
  })

  describe('script structure', () => {
    it('should have no excessive blank lines', () => {
      const config: StatuslineConfig = {
        features: ['directory'],
        theme: 'default',
        colors: false,
        ccusageIntegration: false,
        iconStyle: 'emoji',
        logging: false,
        installLocation: 'project'
      }

      const script = generateBashStatusline(config)

      expect(script).not.toMatch(/\n\n\n+/)
    })

    it('should end with a single newline', () => {
      const config: StatuslineConfig = {
        features: ['directory'],
        theme: 'default',
        colors: false,
        ccusageIntegration: false,
        iconStyle: 'emoji',
        logging: false,
        installLocation: 'project'
      }

      const script = generateBashStatusline(config)

      expect(script.endsWith('\n')).toBe(true)
      expect(script.endsWith('\n\n')).toBe(false)
    })
  })
})