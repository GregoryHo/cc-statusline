import { StatuslineConfig } from './prompts.js'
import { generateBashStatusline } from '../generators/bash-generator.js'
import { testStatuslineScript, generateMockClaudeInput, analyzeTestResult } from '../utils/tester.js'
import { promises as fs } from 'fs'
import chalk from 'chalk'
import ora from 'ora'

export async function previewCommand(scriptPath: string): Promise<void> {
  console.log(chalk.cyan('🔍 Statusline Preview Mode\n'))
  
  let script: string
  
  // Load existing statusline script
  try {
    const spinner = ora(`Loading statusline script from ${scriptPath}...`).start()
    script = await fs.readFile(scriptPath, 'utf-8')
    spinner.succeed('Script loaded!')
    
    // Try to extract config info from the script header
    const headerMatch = script.match(/# Theme: (\w+) \| Colors: (\w+) \| Features: ([^\n]+)/i)
    if (headerMatch) {
      console.log(chalk.yellow('Detected Configuration:'))
      console.log(`   Theme: ${headerMatch[1]}`)
      console.log(`   Colors: ${headerMatch[2]}`) 
      console.log(`   Features: ${headerMatch[3]}\n`)
    }
    
    // Extract generation info if available
    const generationMatch = script.match(/# Generated by cc-statusline.*\n# Custom Claude Code statusline - Created: ([^\n]+)/i)
    if (generationMatch) {
      console.log(chalk.gray(`Generated: ${generationMatch[1]}\n`))
    }
    
  } catch (error) {
    console.error(chalk.red(`❌ Failed to load script: ${error instanceof Error ? error.message : String(error)}`))
    return
  }
  
  // Test the script
  const testSpinner = ora('Testing statusline with mock data...').start()
  const mockInput = generateMockClaudeInput()
  
  console.log(chalk.gray('\nMock Claude Code Input:'))
  console.log(chalk.gray(JSON.stringify(mockInput, null, 2)))
  
  const testResult = await testStatuslineScript(script, mockInput)
  
  if (testResult.success) {
    testSpinner.succeed(`Test completed in ${testResult.executionTime}ms`)
    
    console.log(chalk.green('\n✅ Statusline Output:'))
    console.log(chalk.white('━'.repeat(60)))
    console.log(testResult.output)
    console.log(chalk.white('━'.repeat(60)))
    
    // Basic performance analysis
    console.log(chalk.cyan(`\n📊 Performance: ${getPerformanceEmoji(getPerformanceLevel(testResult.executionTime))} ${getPerformanceLevel(testResult.executionTime)} (${testResult.executionTime}ms)`))
    
    // Basic output validation
    if (testResult.output.includes('📁') || testResult.output.includes('🌿') || testResult.output.includes('🤖')) {
      console.log(chalk.green('✅ Statusline features appear to be working'))
    } else {
      console.log(chalk.yellow('⚠️  Basic features may not be displaying correctly'))
    }
    
  } else {
    testSpinner.fail('Test failed')
    console.error(chalk.red(`\n❌ Error: ${testResult.error}`))
    if (testResult.output) {
      console.log(chalk.gray('\nPartial output:'))
      console.log(testResult.output)
    }
  }
  
  console.log(chalk.green('\n✨ Preview complete! Use `cc-statusline init` to generate a new statusline.'))
}

function getPerformanceEmoji(performance: string): string {
  switch (performance) {
    case 'excellent': return '🚀'
    case 'good': return '✅'
    case 'slow': return '⚠️'
    case 'timeout': return '🐌'
    default: return '❓'
  }
}

function getPerformanceLevel(executionTime: number): string {
  if (executionTime > 1000) return 'timeout'
  if (executionTime > 500) return 'slow'
  if (executionTime > 100) return 'good'
  return 'excellent'
}