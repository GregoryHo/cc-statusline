name: Claude Code

on:
  issue_comment:
    types: [created]
  pull_request_review_comment:
    types: [created]
  issues:
    types: [opened, assigned]
  pull_request_review:
    types: [submitted]

jobs:
  claude:
    if: |
      (github.event_name == 'issue_comment' && contains(github.event.comment.body, '@claude')) ||
      (github.event_name == 'pull_request_review_comment' && contains(github.event.comment.body, '@claude')) ||
      (github.event_name == 'pull_request_review' && contains(github.event.review.body, '@claude')) ||
      (github.event_name == 'issues' && (contains(github.event.issue.body, '@claude') || contains(github.event.issue.title, '@claude')))
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write  # Required for Claude to comment on PRs
      issues: write         # Required for Claude to comment on issues
      id-token: write
      actions: read         # Required for Claude to read CI results on PRs
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Run Claude Code
        id: claude
        uses: anthropics/claude-code-action@beta
        with:
          claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
          github_token: ${{ secrets.GITHUB_TOKEN }}

          # This is an optional setting that allows Claude to read CI results on PRs
          additional_permissions: |
            actions: read

          # Optional: Specify model (defaults to Claude Sonnet 4, uncomment for Claude Opus 4.1)
          # model: "claude-opus-4-1-20250805"

          # Optional: Customize the trigger phrase (default: @claude)
          # trigger_phrase: "/claude"

          # Optional: Trigger when specific user is assigned to an issue
          # assignee_trigger: "claude-bot"

          # Allow Claude to run project-specific commands
          allowed_tools: |
            Bash(npm run build),
            Bash(npm run dev),
            Bash(npm ci),
            Bash(./dist/index.js --version),
            Bash(./dist/index.js init --defaults --no-install),
            Bash(./dist/index.js preview ./.claude/statusline.sh),
            Bash(npx tsx test/performance/benchmark.ts),
            Bash(./test/test-installation.sh)

          # Project-specific instructions for cc-statusline
          custom_instructions: |
            This is **cc-statusline**, a CLI tool for generating Claude Code statuslines.

            ## Key Conventions
            - Use ESM imports with .js extensions (e.g., `from './file.js'`)
            - 2-space indentation, no semicolons
            - Conventional commits (feat:, fix:, docs:, chore:, etc.)
            - Version updates need changes in 3 files:
              - package.json
              - src/index.ts (VERSION constant)
              - src/generators/bash-generator.ts (VERSION constant)
            - Always update CHANGELOG.md for user-facing changes

            ## Project Structure
            - src/cli/ - CLI commands and prompts
            - src/features/ - Feature implementations (git, usage, colors, icons)
            - src/generators/ - Script generators (bash)
            - src/utils/ - Utilities (installer, validator, tester)

            ## Important Notes
            - DO NOT directly modify `.claude/statusline.sh` - it's auto-generated
            - Generated bash scripts must be POSIX-compliant
            - Performance target: statusline execution <500ms

            ## When Asked to Make Changes
            1. Read relevant files first
            2. Run `npm run build` after source changes
            3. Test with `./dist/index.js preview ./.claude/statusline.sh`
            4. Update CHANGELOG.md if user-facing
            5. Check version consistency if version changed
